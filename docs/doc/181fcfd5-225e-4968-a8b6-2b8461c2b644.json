{
    "summary": "This code defines a Flow in Jina, which is a coordinator for multiple tasks. It separates Executors and Flows using YAML to allow non-blocking and asynchronous data flow on the server. The FooExecutor and BarExecutor classes are defined within the code. The Executor classes have methods that take DocumentArray inputs, append a new document to the array, and return it. The Flow is created, then started with the `with f:` statement, and a POST request is sent to the flow's endpoint using the `f.post()` method. Finally, the response texts are printed.",
    "details": [
        {
            "comment": "This code defines a Flow in Jina, which is a coordinator for multiple tasks. It separates Executors and Flows using YAML to allow non-blocking and asynchronous data flow on the server. The FooExecutor and BarExecutor classes are defined within the code. The Executor classes have methods that take DocumentArray inputs, append a new document to the array, and return it. The Flow is created, then started with the `with f:` statement, and a POST request is sent to the flow's endpoint using the `f.post()` method. Finally, the response texts are printed.",
            "location": "\"/media/root/Prima/works/vced/docs/src/code/jina_demo/Flow.py\":0-29",
            "content": "# \u4e00\u4e2a Flow \u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u7cfb\u5217\u4efb\u52a1\u7684\u534f\u8c03\u5668\uff0c\u901a\u8fc7 add \u65b9\u6cd5\u53ef\u4ee5\u5c06\u591a\u4e2a Executor \u4e32\u6210\u4e00\u5957\u6267\u884c\u903b\u8f91\u3002\n# \u901a\u8fc7 YAML \u65b9\u5f0f\u5c06 Executor \u548c Flow \u5206\u5f00\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a\n# - \u670d\u52a1\u5668\u4e0a\u7684\u6570\u636e\u6d41\u662f\u975e\u963b\u585e\u548c\u5f02\u6b65\u7684\uff0c\u5f53 Executor \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u65f6\uff0c\u4f1a\u7acb\u5373\u5904\u7406\u65b0\u8bf7\u6c42\u3002\n# - \u5fc5\u8981\u65f6\u4f1a\u81ea\u52a8\u6dfb\u52a0\u8d1f\u8f7d\u5e73\u8861\uff0c\u4ee5\u786e\u4fdd\u6700\u5927\u541e\u5410\u91cf\u3002\nfrom jina import Document, DocumentArray, Flow, Executor, requests\nclass FooExecutor(Executor):\n    @requests\n    def foo(self, docs: DocumentArray, **kwargs):\n        docs.append(Document(text='foo was here'))\nclass BarExecutor(Executor):\n    @requests\n    def bar(self, docs: DocumentArray, **kwargs):\n        docs.append(Document(text='bar was here'))\nf = (\n    Flow()\n    .add(uses=FooExecutor, name='fooExecutor')\n    .add(uses=BarExecutor, name='barExecutor')\n)  # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 Flow\nwith f:  # \u542f\u52a8 Flow\n    response = f.post(\n        on='/'\n    )  # \u5411 flow \u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\n    print(response.texts)"
        }
    ]
}