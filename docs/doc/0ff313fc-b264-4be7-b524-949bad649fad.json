{
    "summary": "This Python script enables video search and clip extraction in web applications, allowing users to upload videos, provide descriptions, and extract clips based on time and duration.",
    "details": [
        {
            "comment": "This code imports necessary packages, creates a Jina client, sets the title and page configuration, allows video uploading, previews and saves the uploaded videos, generates a unique identifier for each video, and provides a text input box.",
            "location": "\"/media/root/Prima/works/vced/docs/src/code/web/app.py\":0-44",
            "content": "# \u5bfc\u5165\u9700\u8981\u7684\u5305\nimport streamlit as st\nfrom jina import Client, DocumentArray, Document\nimport json\nimport os\nimport time\nimport uuid\nVIDEO_PATH = f\"{os.getcwd()}/data\"\n# \u89c6\u9891\u5b58\u50a8\u7684\u8def\u5f84\nif not os.path.exists(VIDEO_PATH):\n    os.mkdir(VIDEO_PATH)\n# \u89c6\u9891\u526a\u8f91\u540e\u5b58\u50a8\u7684\u8def\u5f84\nif not os.path.exists(VIDEO_PATH + \"/videos/\"):\n    os.mkdir(VIDEO_PATH + \"/videos\")\n# GRPC \u76d1\u542c\u7684\u7aef\u53e3\nport = 45679\n# \u521b\u5efa Jina \u5ba2\u6237\u7aef\nc = Client(host=f\"grpc://localhost:{port}\")\n# \u8bbe\u7f6e\u6807\u7b7e\u680f\nst.set_page_config(page_title=\"VCED\", page_icon=\"\ud83d\udd0d\")\n# \u8bbe\u7f6e\u6807\u9898\nst.title('Welcome to VCED!')\n# \u89c6\u9891\u4e0a\u4f20\u7ec4\u4ef6\nuploaded_file = st.file_uploader(\"Choose a video\")\nvideo_name = None  # name of the video\n# \u5224\u65ad\u89c6\u9891\u662f\u5426\u4e0a\u4f20\u6210\u529f\nif uploaded_file is not None:\n    # preview, delete and download the video\n    video_bytes = uploaded_file.read()\n    st.video(video_bytes)\n    # save file to disk for later process\n    video_name = uploaded_file.name\n    with open(f\"{VIDEO_PATH}/{video_name}\", mode='wb') as f:\n        f.write(video_bytes)  # save video to disk\nvideo_file_path = f\"{VIDEO_PATH}/{video_name}\"\nuid = uuid.uuid1()\n# \u6587\u672c\u8f93\u5165\u6846\ntext_prompt = st.text_input("
        },
        {
            "comment": "This code contains functions for video processing and interaction with a backend. It allows the user to input a description and search for clips in a video, specifying the number of results (Top N) and using ffmpeg for video cutting. The \"search_clip\" function communicates with the backend to process the uploaded video and search for matching clips based on the provided text prompt.",
            "location": "\"/media/root/Prima/works/vced/docs/src/code/web/app.py\":45-77",
            "content": "    \"Description\", placeholder=\"please input the description\", help='The description of clips from the video')\n# top k \u8f93\u5165\u6846\ntopn_value = st.text_input(\n    \"Top N\", placeholder=\"please input an integer\", help='The number of results. By default, n equals 1')\n# \u6839\u636e\u79d2\u6570\u8fd8\u539f \u4f8b\u5982 10829s \u8f6c\u6362\u4e3a 03:04:05\ndef getTime(t: int):\n    m,s = divmod(t, 60)\n    h, m = divmod(m, 60)\n    t_str = \"%02d:%02d:%02d\" % (h, m, s)\n    print (t_str)\n    return t_str\n# \u6839\u636e\u4f20\u5165\u7684\u65f6\u95f4\u6233\u4f4d\u7f6e\u5bf9\u89c6\u9891\u8fdb\u884c\u622a\u53d6\ndef cutVideo(start_t: str, length: int, input: str, output: str):\n    \"\"\"\n    start_t: \u8d77\u59cb\u4f4d\u7f6e\n    length: \u6301\u7eed\u65f6\u957f\n    input: \u89c6\u9891\u8f93\u5165\u4f4d\u7f6e\n    output: \u89c6\u9891\u8f93\u51fa\u4f4d\u7f6e\n    \"\"\"\n    os.system(f'ffmpeg -ss {start_t} -i {input} -t {length} -c:v copy -c:a copy -y {output}')\n# \u4e0e\u540e\u7aef\u4ea4\u4e92\u90e8\u5206\ndef search_clip(uid, uri, text_prompt, topn_value):\n    video = DocumentArray([Document(uri=uri, id=str(uid) + uploaded_file.name)])\n    t1 = time.time()\n    c.post('/index', inputs=video) # \u9996\u5148\u5c06\u4e0a\u4f20\u7684\u89c6\u9891\u8fdb\u884c\u5904\u7406\n    text = DocumentArray([Document(text=text_prompt)])\n    print(topn_value)\n    resp = c.post('/search', inputs=text, parameters={\"uid\": str(uid), \"maxCount\":int(topn_value)}) # \u5176\u6b21\u6839\u636e\u4f20\u5165\u7684\u6587\u672c\u5bf9\u89c6\u9891\u7247\u6bb5\u8fdb\u884c\u641c\u7d22"
        },
        {
            "comment": "This code is from a web application Python script. It handles the search functionality for video files based on user input. The user can upload a video file and provide a description to search for similar clips within the video. If the top k value is not specified, it defaults to 1. The matching results are displayed with the start and end positions of each matching clip.",
            "location": "\"/media/root/Prima/works/vced/docs/src/code/web/app.py\":78-99",
            "content": "    data = [{\"text\": doc.text,\"matches\": doc.matches.to_dict()} for doc in resp] # \u5f97\u5230\u6bcf\u4e2a\u6587\u672c\u5bf9\u5e94\u7684\u76f8\u4f3c\u89c6\u9891\u7247\u6bb5\u8d77\u59cb\u4f4d\u7f6e\u5217\u8868\n    return json.dumps(data)\n# search\nsearch_button = st.button(\"Search\")\nif search_button: # \u5224\u65ad\u662f\u5426\u70b9\u51fb\u641c\u7d22\u6309\u94ae\n    if uploaded_file is not None: # \u5224\u65ad\u662f\u5426\u4e0a\u4f20\u89c6\u9891\u6587\u4ef6\n        if text_prompt == None or text_prompt == \"\": # \u5224\u65ad\u662f\u5426\u8f93\u5165\u67e5\u8be2\u6587\u672c\n            st.warning('Please input the description first!')\n        else:\n            if topn_value == None or topn_value == \"\": # \u5982\u679c\u6ca1\u6709\u8f93\u5165 top k \u5219\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a1\n                topn_value = 1\n            with st.spinner(\"Processing...\"):\n                result = search_clip(uid, video_file_path, text_prompt, topn_value) \n                result = json.loads(result) # \u89e3\u6790\u5f97\u5230\u7684\u7ed3\u679c\n                for i in range(len(result)):\n                    matchLen = len(result[i]['matches'])\n                    for j in range(matchLen):\n                        print(j)\n                        left = result[i]['matches'][j]['tags']['leftIndex'] # \u89c6\u9891\u7247\u6bb5\u7684\u5f00\u59cb\u4f4d\u7f6e\n                        right = result[i]['matches'][j]['tags']['rightIndex'] # \u89c6\u9891\u7247\u6bb5\u7684\u7ed3\u675f\u4f4d\u7f6e"
        },
        {
            "comment": "This code snippet handles video clip extraction and display on the frontend. If a video is uploaded, it extracts a clip based on start time and duration, displays it on the frontend, and shows a success message. If no video is uploaded, it displays a warning to upload a video first.",
            "location": "\"/media/root/Prima/works/vced/docs/src/code/web/app.py\":100-108",
            "content": "                        print(left)\n                        print(right)\n                        start_t = getTime(left) # \u5c06\u5176\u8f6c\u6362\u4e3a\u6807\u51c6\u65f6\u95f4\n                        output = VIDEO_PATH + \"/videos/clip\" + str(j) +\".mp4\"\n                        cutVideo(start_t,right-left, video_file_path, output) # \u5bf9\u89c6\u9891\u8fdb\u884c\u5207\u5206\n                        st.video(output) #\u5c06\u89c6\u9891\u663e\u793a\u5230\u524d\u7aef\u754c\u9762\n                st.success(\"Done!\")\n    else:\n        st.warning('Please upload video first!')"
        }
    ]
}